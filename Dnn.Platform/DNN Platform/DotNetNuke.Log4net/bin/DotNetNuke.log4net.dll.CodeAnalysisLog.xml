<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2017\professional\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="15.0">
 <Targets>
  <Target Name="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\bin\DotNetNuke.log4net.dll">
   <Modules>
    <Module Name="dotnetnuke.log4net.dll">
     <Namespaces>
      <Namespace Name="log4net.Appender">
       <Types>
        <Type Name="AdoNetAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#SendBuffer(System.Data.IDbTransaction,log4net.Core.LoggingEvent[])" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="AdoNetAppender.cs" Line="544">The query string passed to 'IDbCommand.CommandText.set(string)' in 'AdoNetAppender.SendBuffer(IDbTransaction, LoggingEvent[])' could contain the following variables 'this.CommandText'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="AdoNetAppender.cs" Line="590">The query string passed to 'IDbCommand.CommandText.set(string)' in 'AdoNetAppender.SendBuffer(IDbTransaction, LoggingEvent[])' could contain the following variables 'this.GetLogStatement(e)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AppenderCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(log4net.Appender.AppenderCollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="AppenderCollection.cs" Line="70">'AppenderCollection.AppenderCollection(AppenderCollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;AppenderCollection..ctor(AppenderCollection)&#xD;&#xA;AppenderCollection.AddRange(AppenderCollection):Int32</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="AppenderCollection.cs" Line="70">'AppenderCollection.AppenderCollection(AppenderCollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;AppenderCollection..ctor(AppenderCollection)&#xD;&#xA;AppenderCollection.AddRange(AppenderCollection):Int32&#xD;&#xA;AppenderCollection.EnsureCapacity(Int32):Void&#xD;&#xA;AppenderCollection.set_Capacity(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(log4net.Appender.IAppender[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="AppenderCollection.cs" Line="70">'AppenderCollection.AppenderCollection(IAppender[])' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;AppenderCollection..ctor(IAppender[])&#xD;&#xA;AppenderCollection.AddRange(IAppender[]):Int32</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="AppenderCollection.cs" Line="70">'AppenderCollection.AppenderCollection(IAppender[])' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;AppenderCollection..ctor(IAppender[])&#xD;&#xA;AppenderCollection.AddRange(IAppender[]):Int32&#xD;&#xA;AppenderCollection.EnsureCapacity(Int32):Void&#xD;&#xA;AppenderCollection.set_Capacity(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Collections.ICollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="AppenderCollection.cs" Line="70">'AppenderCollection.AppenderCollection(ICollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;AppenderCollection..ctor(ICollection)&#xD;&#xA;AppenderCollection.AddRange(ICollection):Int32</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="AppenderCollection.cs" Line="70">'AppenderCollection.AppenderCollection(ICollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;AppenderCollection..ctor(ICollection)&#xD;&#xA;AppenderCollection.AddRange(ICollection):Int32&#xD;&#xA;AppenderCollection.Add(IAppender):Int32</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="AppenderCollection.cs" Line="70">'AppenderCollection.AppenderCollection(ICollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;AppenderCollection..ctor(ICollection)&#xD;&#xA;AppenderCollection.AddRange(ICollection):Int32&#xD;&#xA;AppenderCollection.EnsureCapacity(Int32):Void&#xD;&#xA;AppenderCollection.set_Capacity(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AppenderSkeleton" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'AppenderSkeleton' because it creates members of the following IDisposable types: 'ReusableStringWriter'. If 'AppenderSkeleton' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#RenderLoggingEvent(log4net.Core.LoggingEvent)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="AppenderSkeleton.cs" Line="706">'AppenderSkeleton.RenderLoggingEvent(LoggingEvent)' locks on a reference of type 'ReusableStringWriter'. Replace this with a lock against an object with strong-identity.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ColoredConsoleAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'ColoredConsoleAppender' because it creates members of the following IDisposable types: 'StreamWriter'. If 'ColoredConsoleAppender' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(log4net.Layout.ILayout,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="ColoredConsoleAppender.cs" Line="510">'ColoredConsoleAppender.ColoredConsoleAppender(ILayout, bool)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ColoredConsoleAppender..ctor(ILayout, Boolean)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetConsoleOutputCP()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'ColoredConsoleAppender.GetConsoleOutputCP()' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetConsoleScreenBufferInfo(System.IntPtr,log4net.Appender.ColoredConsoleAppender+CONSOLE_SCREEN_BUFFER_INFO&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'ColoredConsoleAppender.GetConsoleScreenBufferInfo(IntPtr, out ColoredConsoleAppender.CONSOLE_SCREEN_BUFFER_INFO)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStdHandle(System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'ColoredConsoleAppender.GetStdHandle(uint)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetConsoleTextAttribute(System.IntPtr,System.UInt16)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'ColoredConsoleAppender.SetConsoleTextAttribute(IntPtr, ushort)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConsoleAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(log4net.Layout.ILayout,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="ConsoleAppender.cs" Line="217">'ConsoleAppender.ConsoleAppender(ILayout, bool)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ConsoleAppender..ctor(ILayout, Boolean)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DebugAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(log4net.Layout.ILayout)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="DebugAppender.cs" Line="186">'DebugAppender.DebugAppender(ILayout)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;DebugAppender..ctor(ILayout)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EventLogAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(log4net.Layout.ILayout)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="EventLogAppender.cs" Line="117">'EventLogAppender.EventLogAppender(ILayout)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;EventLogAppender..ctor(ILayout)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FileAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'FileAppender' because it creates members of the following IDisposable types: 'FileAppender.LockingStream'. If 'FileAppender' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(log4net.Layout.ILayout,System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="FileAppender.cs" Line="1460">'FileAppender.FileAppender(ILayout, string, bool)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;FileAppender..ctor(ILayout, String, Boolean)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="FileAppender.cs" Line="1460">'FileAppender.FileAppender(ILayout, string, bool)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;FileAppender..ctor(ILayout, String, Boolean)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void&#xD;&#xA;AppenderSkeleton.ActivateOptions():Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="FileAppender.cs" Line="1460">'FileAppender.FileAppender(ILayout, string, bool)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;FileAppender..ctor(ILayout, String, Boolean)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void&#xD;&#xA;FileAppender.set_File(String):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FileAppender+InterProcessLock" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'FileAppender.InterProcessLock' because it creates members of the following IDisposable types: 'Mutex'. If 'FileAppender.InterProcessLock' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="FileAppender+LockingStream" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#AcquireLock()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="FileAppender.cs" Line="337">'FileAppender.LockingStream.AcquireLock()' locks on a reference of type 'FileAppender.LockingStream'. Replace this with a lock against an object with strong-identity.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReleaseLock()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="FileAppender.cs" Line="352">'FileAppender.LockingStream.ReleaseLock()' locks on a reference of type 'FileAppender.LockingStream'. Replace this with a lock against an object with strong-identity.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FileAppender+LockingStream+LockStateException" Kind="Class" Accessibility="Public" ExternallyVisible="False">
         <Messages>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'FileAppender.LockingStream.LockStateException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="LocalSyslogAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnNativeResourcesShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1049" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
           <Issue Certainty="50" Level="CriticalError">Implement IDisposable on 'LocalSyslogAppender'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#closelog()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'LocalSyslogAppender.closelog()' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#openlog(System.IntPtr,System.Int32,log4net.Appender.LocalSyslogAppender+SyslogFacility)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'LocalSyslogAppender.openlog(IntPtr, int, LocalSyslogAppender.SyslogFacility)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#syslog(System.Int32,System.String,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'LocalSyslogAppender.syslog(int, string, string)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'format' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="2" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'message' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetSendAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'NetSendAppender.NetMessageBufferSend(string, string, string, string, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'NetSendAppender.NetMessageBufferSend(string, string, string, string, int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OutputDebugStringAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OutputDebugString(System.String)" Kind="Method" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'OutputDebugStringAppender.OutputDebugString(string)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'OutputDebugStringAppender.OutputDebugString(string)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'message' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RemotingAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'RemotingAppender' because it creates members of the following IDisposable types: 'ManualResetEvent'. If 'RemotingAppender' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="RollingFileAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'RollingFileAppender' because it creates members of the following IDisposable types: 'Mutex'. If 'RollingFileAppender' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="TelnetAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'TelnetAppender' because it creates members of the following IDisposable types: 'TelnetAppender.SocketHandler'. If 'TelnetAppender' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="TelnetAppender+SocketHandler" Kind="Class" Accessibility="Family" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'TelnetAppender.SocketHandler' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="TelnetAppender.cs" Line="503">Modify 'TelnetAppender.SocketHandler.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TelnetAppender+SocketHandler+SocketClient" Kind="Class" Accessibility="Family" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'TelnetAppender.SocketHandler.SocketClient' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="TelnetAppender.cs" Line="295">Modify 'TelnetAppender.SocketHandler.SocketClient.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TextWriterAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'TextWriterAppender' because it creates members of the following IDisposable types: 'QuietTextWriter'. If 'TextWriterAppender' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(log4net.Layout.ILayout,System.IO.TextWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="TextWriterAppender.cs" Line="468">'TextWriterAppender.TextWriterAppender(ILayout, TextWriter)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;TextWriterAppender..ctor(ILayout, TextWriter)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="TextWriterAppender.cs" Line="468">'TextWriterAppender.TextWriterAppender(ILayout, TextWriter)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;TextWriterAppender..ctor(ILayout, TextWriter)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void&#xD;&#xA;TextWriterAppender.set_Writer(TextWriter):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="TextWriterAppender.cs" Line="468">'TextWriterAppender.TextWriterAppender(ILayout, TextWriter)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;TextWriterAppender..ctor(ILayout, TextWriter)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void&#xD;&#xA;TextWriterAppender.set_Writer(TextWriter):Void&#xD;&#xA;TextWriterAppender.Reset():Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="TextWriterAppender.cs" Line="468">'TextWriterAppender.TextWriterAppender(ILayout, TextWriter)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;TextWriterAppender..ctor(ILayout, TextWriter)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void&#xD;&#xA;TextWriterAppender.set_Writer(TextWriter):Void&#xD;&#xA;TextWriterAppender.Reset():Void&#xD;&#xA;TextWriterAppender.WriteFooterAndCloseWriter():Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="TextWriterAppender.cs" Line="468">'TextWriterAppender.TextWriterAppender(ILayout, TextWriter)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;TextWriterAppender..ctor(ILayout, TextWriter)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void&#xD;&#xA;TextWriterAppender.set_Writer(TextWriter):Void&#xD;&#xA;TextWriterAppender.Reset():Void&#xD;&#xA;TextWriterAppender.WriteFooterAndCloseWriter():Void&#xD;&#xA;Te&#xD;&#xA;TextWriterAppender.WriteHeader():Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="TextWriterAppender.cs" Line="468">'TextWriterAppender.TextWriterAppender(ILayout, TextWriter)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;TextWriterAppender..ctor(ILayout, TextWriter)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void&#xD;&#xA;TextWriterAppender.set_Writer(TextWriter):Void&#xD;&#xA;TextWriterAppender.Reset():Void&#xD;&#xA;TextWriterAppender.WriteFooterAndCloseWriter():Void&#xD;&#xA;TextWriterAppender.WriteFooter():Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="TextWriterAppender.cs" Line="468">'TextWriterAppender.TextWriterAppender(ILayout, TextWriter)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;TextWriterAppender..ctor(ILayout, TextWriter)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void&#xD;&#xA;TextWriterAppender.set_Writer(TextWriter):Void&#xD;&#xA;TextWriterAppender.Reset():Void&#xD;&#xA;TextWriterAppender.WriteFooterAndCloseWriter():Void&#xD;&#xA;TextWriterAppender.WriteFooter():Void&#xD;&#xA;AppenderSkeleton.get_Layout():ILayout</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="TextWriterAppender.cs" Line="468">'TextWriterAppender.TextWriterAppender(ILayout, TextWriter)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;TextWriterAppender..ctor(ILayout, TextWriter)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void&#xD;&#xA;TextWriterAppender.set_Writer(TextWriter):Void&#xD;&#xA;TextWriterAppender.Reset():Void&#xD;&#xA;TextWriterAppender.WriteFooterAndCloseWriter():Void&#xD;&#xA;TextWriterAppender.WriteFooter():Void&#xD;&#xA;TextWriterAppender.CloseWriter():Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="TextWriterAppender.cs" Line="468">'TextWriterAppender.TextWriterAppender(ILayout, TextWriter)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;TextWriterAppender..ctor(ILayout, TextWriter)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void&#xD;&#xA;TextWriterAppender.set_Writer(TextWriter):Void&#xD;&#xA;TextWriterAppender.Reset():Void&#xD;&#xA;TextWriterAppender.WriteFooterAndCloseWriter():Void&#xD;&#xA;TextWriterAppender.WriteFooter():Void&#xD;&#xA;TextWriterAppender.CloseWriter():Void&#xD;&#xA;AppenderSkeleton.get_ErrorHandler():IErrorHandler</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TraceAppender" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(log4net.Layout.ILayout)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Appender" File="TraceAppender.cs" Line="201">'TraceAppender.TraceAppender(ILayout)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;TraceAppender..ctor(ILayout)&#xD;&#xA;AppenderSkeleton.set_Layout(ILayout):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="log4net.Config">
       <Types>
        <Type Name="XmlConfigurator+ConfigureAndWatchHandler" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor(log4net.Repository.ILoggerRepository,System.IO.FileInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.Changed.add(FileSystemEventHandler)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Changed.add(FileSystemEventHandler)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.Changed.add(FileSystemEventHandler)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Changed.add(FileSystemEventHandler)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(ILoggerRepository, FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.Created.add(FileSystemEventHandler)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Created.add(FileSystemEventHandler)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.Created.add(FileSystemEventHandler)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Created.add(FileSystemEventHandler)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(ILoggerRepository, FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.Deleted.add(FileSystemEventHandler)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Deleted.add(FileSystemEventHandler)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.Deleted.add(FileSystemEventHandler)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Deleted.add(FileSystemEventHandler)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(ILoggerRepository, FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.EnableRaisingEvents.set(bool)' which has a LinkDemand. By making this call, 'FileSystemWatcher.EnableRaisingEvents.set(bool)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.EnableRaisingEvents.set(bool)' which has a LinkDemand. By making this call, 'FileSystemWatcher.EnableRaisingEvents.set(bool)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(ILoggerRepository, FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.Filter.set(string)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Filter.set(string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.Filter.set(string)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Filter.set(string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(ILoggerRepository, FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.NotifyFilter.set(NotifyFilters)' which has a LinkDemand. By making this call, 'FileSystemWatcher.NotifyFilter.set(NotifyFilters)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.NotifyFilter.set(NotifyFilters)' which has a LinkDemand. By making this call, 'FileSystemWatcher.NotifyFilter.set(NotifyFilters)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(ILoggerRepository, FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.Path.set(string)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Path.set(string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.Path.set(string)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Path.set(string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(ILoggerRepository, FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.Renamed.add(RenamedEventHandler)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Renamed.add(RenamedEventHandler)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="975">'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)' calls into 'FileSystemWatcher.Renamed.add(RenamedEventHandler)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Renamed.add(RenamedEventHandler)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(ILoggerRepository, FileInfo)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="1056">'XmlConfigurator.ConfigureAndWatchHandler.Dispose()' calls into 'FileSystemWatcher.EnableRaisingEvents.set(bool)' which has a LinkDemand. By making this call, 'FileSystemWatcher.EnableRaisingEvents.set(bool)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.Dispose()'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.Dispose()'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Config" File="XmlConfigurator.cs" Line="1056">'XmlConfigurator.ConfigureAndWatchHandler.Dispose()' calls into 'FileSystemWatcher.EnableRaisingEvents.set(bool)' which has a LinkDemand. By making this call, 'FileSystemWatcher.EnableRaisingEvents.set(bool)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.Dispose()'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatchHandler.Dispose()'&#xD;&#xA;   -&gt;'XmlConfigurator.InternalConfigureAndWatch(ILoggerRepository, FileInfo)'&#xD;&#xA;   -&gt;'XmlConfigurator.ConfigureAndWatch(ILoggerRepository, FileInfo)'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="log4net.Core">
       <Types>
        <Type Name="LevelCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(log4net.Core.Level[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Core" File="LevelCollection.cs" Line="71">'LevelCollection.LevelCollection(Level[])' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;LevelCollection..ctor(Level[])&#xD;&#xA;LevelCollection.AddRange(Level[]):Int32</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Core" File="LevelCollection.cs" Line="71">'LevelCollection.LevelCollection(Level[])' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;LevelCollection..ctor(Level[])&#xD;&#xA;LevelCollection.AddRange(Level[]):Int32&#xD;&#xA;LevelCollection.EnsureCapacity(Int32):Void&#xD;&#xA;LevelCollection.set_Capacity(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(log4net.Core.LevelCollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Core" File="LevelCollection.cs" Line="71">'LevelCollection.LevelCollection(LevelCollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;LevelCollection..ctor(LevelCollection)&#xD;&#xA;LevelCollection.AddRange(LevelCollection):Int32</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Core" File="LevelCollection.cs" Line="71">'LevelCollection.LevelCollection(LevelCollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;LevelCollection..ctor(LevelCollection)&#xD;&#xA;LevelCollection.AddRange(LevelCollection):Int32&#xD;&#xA;LevelCollection.EnsureCapacity(Int32):Void&#xD;&#xA;LevelCollection.set_Capacity(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Collections.ICollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Core" File="LevelCollection.cs" Line="71">'LevelCollection.LevelCollection(ICollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;LevelCollection..ctor(ICollection)&#xD;&#xA;LevelCollection.AddRange(ICollection):Int32</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Core" File="LevelCollection.cs" Line="71">'LevelCollection.LevelCollection(ICollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;LevelCollection..ctor(ICollection)&#xD;&#xA;LevelCollection.AddRange(ICollection):Int32&#xD;&#xA;LevelCollection.Add(Level):Int32</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Core" File="LevelCollection.cs" Line="71">'LevelCollection.LevelCollection(ICollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;LevelCollection..ctor(ICollection)&#xD;&#xA;LevelCollection.AddRange(ICollection):Int32&#xD;&#xA;LevelCollection.EnsureCapacity(Int32):Void&#xD;&#xA;LevelCollection.set_Capacity(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LoggingEvent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Core" File="LoggingEvent.cs" Line="1100">Add the following security attribute to 'LoggingEvent.GetObjectData(SerializationInfo, StreamingContext)' in order to match a LinkDemand on base method 'ISerializable.GetObjectData(SerializationInfo, StreamingContext)':  'SecurityCriticalAttribute'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LogImpl" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(log4net.Core.ILogger)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Core" File="LogImpl.cs" Line="112">'LogImpl.LogImpl(ILogger)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;LogImpl..ctor(ILogger)&#xD;&#xA;LogImpl.ReloadLevels(ILoggerRepository):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="log4net.Layout">
       <Types>
        <Type Name="ExceptionLayout" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Layout" File="ExceptionLayout.cs" Line="55">'ExceptionLayout.ExceptionLayout()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ExceptionLayout..ctor()&#xD;&#xA;LayoutSkeleton.set_IgnoresException(Boolean):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PatternLayout" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Layout" File="PatternLayout.cs" Line="843">'PatternLayout.PatternLayout(string)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;PatternLayout..ctor(String)&#xD;&#xA;LayoutSkeleton.set_IgnoresException(Boolean):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Layout" File="PatternLayout.cs" Line="843">'PatternLayout.PatternLayout(string)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;PatternLayout..ctor(String)&#xD;&#xA;LayoutSkeleton.set_IgnoresException(Boolean):Void&#xD;&#xA;LayoutSkeleton.ActivateOptions():Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SimpleLayout" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Layout" File="SimpleLayout.cs" Line="50">'SimpleLayout.SimpleLayout()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;SimpleLayout..ctor()&#xD;&#xA;LayoutSkeleton.set_IgnoresException(Boolean):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlLayoutBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Layout" File="XmlLayoutBase.cs" Line="57">'XmlLayoutBase.XmlLayoutBase()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;XmlLayoutBase..ctor()&#xD;&#xA;LayoutSkeleton.set_IgnoresException(Boolean):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Layout" File="XmlLayoutBase.cs" Line="246">'XmlLayoutBase.XmlLayoutBase(bool)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;XmlLayoutBase..ctor(Boolean)&#xD;&#xA;LayoutSkeleton.set_IgnoresException(Boolean):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="log4net.Plugin">
       <Types>
        <Type Name="PluginCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(log4net.Plugin.IPlugin[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Plugin" File="PluginCollection.cs" Line="72">'PluginCollection.PluginCollection(IPlugin[])' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;PluginCollection..ctor(IPlugin[])&#xD;&#xA;PluginCollection.AddRange(IPlugin[]):Int32</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Plugin" File="PluginCollection.cs" Line="72">'PluginCollection.PluginCollection(IPlugin[])' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;PluginCollection..ctor(IPlugin[])&#xD;&#xA;PluginCollection.AddRange(IPlugin[]):Int32&#xD;&#xA;PluginCollection.EnsureCapacity(Int32):Void&#xD;&#xA;PluginCollection.set_Capacity(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(log4net.Plugin.PluginCollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Plugin" File="PluginCollection.cs" Line="72">'PluginCollection.PluginCollection(PluginCollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;PluginCollection..ctor(PluginCollection)&#xD;&#xA;PluginCollection.AddRange(PluginCollection):Int32</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Plugin" File="PluginCollection.cs" Line="72">'PluginCollection.PluginCollection(PluginCollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;PluginCollection..ctor(PluginCollection)&#xD;&#xA;PluginCollection.AddRange(PluginCollection):Int32&#xD;&#xA;PluginCollection.EnsureCapacity(Int32):Void&#xD;&#xA;PluginCollection.set_Capacity(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Collections.ICollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Plugin" File="PluginCollection.cs" Line="72">'PluginCollection.PluginCollection(ICollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;PluginCollection..ctor(ICollection)&#xD;&#xA;PluginCollection.AddRange(ICollection):Int32</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Plugin" File="PluginCollection.cs" Line="72">'PluginCollection.PluginCollection(ICollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;PluginCollection..ctor(ICollection)&#xD;&#xA;PluginCollection.AddRange(ICollection):Int32&#xD;&#xA;PluginCollection.Add(IPlugin):Int32</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Plugin" File="PluginCollection.cs" Line="72">'PluginCollection.PluginCollection(ICollection)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;PluginCollection..ctor(ICollection)&#xD;&#xA;PluginCollection.AddRange(ICollection):Int32&#xD;&#xA;PluginCollection.EnsureCapacity(Int32):Void&#xD;&#xA;PluginCollection.set_Capacity(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="log4net.Repository.Hierarchy">
       <Types>
        <Type Name="Hierarchy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#log4net.Repository.IBasicRepositoryConfigurator.Configure(log4net.Appender.IAppender)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Repository\Hierarchy" File="Hierarchy.cs" Line="557">Make 'Hierarchy' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBasicRepositoryConfigurator.Configure(IAppender)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#log4net.Repository.IBasicRepositoryConfigurator.Configure(log4net.Appender.IAppender[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Repository\Hierarchy" File="Hierarchy.cs" Line="566">Make 'Hierarchy' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBasicRepositoryConfigurator.Configure(params IAppender[])' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#log4net.Repository.IXmlRepositoryConfigurator.Configure(System.Xml.XmlElement)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Repository\Hierarchy" File="Hierarchy.cs" Line="610">Make 'Hierarchy' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IXmlRepositoryConfigurator.Configure(XmlElement)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RootLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(log4net.Core.Level)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Repository\Hierarchy" File="RootLogger.cs" Line="62">'RootLogger.RootLogger(Level)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;RootLogger..ctor(Level)&#xD;&#xA;Logger.set_Level(Level):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="log4net.Util">
       <Types>
        <Type Name="LogLog" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LogReceived" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'LogReceivedEventHandler' as an object named 'sender'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LogLog+LogReceivedAdapter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'LogLog.LogReceivedAdapter' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="LogLog.cs" Line="648">Modify 'LogLog.LogReceivedAdapter.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NativeError" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FormatMessage(System.Int32,System.IntPtr&amp;,System.Int32,System.Int32,System.String&amp;,System.Int32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'NativeError.FormatMessage(int, ref IntPtr, int, int, ref string, int, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PatternConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'PatternConverter' because it creates members of the following IDisposable types: 'ReusableStringWriter'. If 'PatternConverter' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Format(System.IO.TextWriter,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="PatternConverter.cs" Line="196">'PatternConverter.Format(TextWriter, object)' locks on a reference of type 'ReusableStringWriter'. Replace this with a lock against an object with strong-identity.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PatternString" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="PatternString.cs" Line="286">'PatternString.PatternString(string)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;PatternString..ctor(String)&#xD;&#xA;PatternString.ActivateOptions():Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReaderWriterLock" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'ReaderWriterLock' because it creates members of the following IDisposable types: 'ReaderWriterLockSlim'. If 'ReaderWriterLock' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ReadOnlyPropertiesDictionary" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="ReadOnlyPropertiesDictionary.cs" Line="213">Add the following security attribute to 'ReadOnlyPropertiesDictionary.GetObjectData(SerializationInfo, StreamingContext)' in order to match a LinkDemand on base method 'ISerializable.GetObjectData(SerializationInfo, StreamingContext)':  'SecurityCriticalAttribute'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.ICollection.CopyTo(System.Array,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="ReadOnlyPropertiesDictionary.cs" Line="344">Make 'ReadOnlyPropertiesDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection.CopyTo(Array, int)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.ICollection.IsSynchronized" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.ICollection.get_IsSynchronized()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="ReadOnlyPropertiesDictionary.cs" Line="353">Make 'ReadOnlyPropertiesDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection.IsSynchronized.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.ICollection.SyncRoot" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.ICollection.get_SyncRoot()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="ReadOnlyPropertiesDictionary.cs" Line="369">Make 'ReadOnlyPropertiesDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection.SyncRoot.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.IDictionary.Add(System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="ReadOnlyPropertiesDictionary.cs" Line="282">Make 'ReadOnlyPropertiesDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary.Add(object, object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IDictionary.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="ReadOnlyPropertiesDictionary.cs" Line="245">Make 'ReadOnlyPropertiesDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IDictionary.IsFixedSize" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.IDictionary.get_IsFixedSize()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="ReadOnlyPropertiesDictionary.cs" Line="331">Make 'ReadOnlyPropertiesDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary.IsFixedSize.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.IDictionary.IsReadOnly" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.IDictionary.get_IsReadOnly()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="ReadOnlyPropertiesDictionary.cs" Line="291">Make 'ReadOnlyPropertiesDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary.IsReadOnly.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.IDictionary.Keys" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.IDictionary.get_Keys()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="ReadOnlyPropertiesDictionary.cs" Line="323">Make 'ReadOnlyPropertiesDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary.Keys.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.IDictionary.Remove(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="ReadOnlyPropertiesDictionary.cs" Line="254">Make 'ReadOnlyPropertiesDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary.Remove(object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IDictionary.Values" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.IDictionary.get_Values()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="ReadOnlyPropertiesDictionary.cs" Line="315">Make 'ReadOnlyPropertiesDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary.Values.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\radal\Desktop\DNN_Platform_9.1.1.129-232_Source\Dnn.Platform\DNN Platform\DotNetNuke.Log4net\log4net\Util" File="ReadOnlyPropertiesDictionary.cs" Line="380">Make 'ReadOnlyPropertiesDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WindowsSecurityContext" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CloseHandle(System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'WindowsSecurityContext.CloseHandle(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DuplicateToken(System.IntPtr,System.Int32,System.IntPtr&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'WindowsSecurityContext.DuplicateToken(IntPtr, int, ref IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogonUser(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'WindowsSecurityContext.LogonUser(string, string, string, int, int, ref IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpszUsername' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpszDomain' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="2" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2018-01-26 23:30:34Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpszPassword' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009">
   <Name>Declare event handlers correctly</Name>
   <Description>By convention, .NET events have two parameters that specify the event sender and event data. Event handler signatures should follow this form: void MyEventHandler(object sender, EventArgs e). The 'sender' parameter is always of type System.Object, even if it is possible to employ a more specific type. The 'e' parameter is always of type System.EventArgs. Events that do not provide event data should use the System.EventHandler delegate type. Event handlers return void so that they can send each event to multiple target methods. Any value returned by a target would be lost after the first call.</Description>
   <Resolution Name="First">Declare the first parameter of {0} as an object named 'sender'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182133.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>Do not indirectly expose methods with link demands</Name>
   <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
   <Resolution Name="Default">{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182303.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002">
   <Name>Do not lock on objects with weak identity</Name>
   <Description>Don't take locks on objects that may bleed across AppDomains or that don't have a strong identity.</Description>
   <Resolution Name="Default">{0} locks on a reference of type {1}. Replace this with a lock against an object with strong-identity.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182290.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalError</MessageLevel>
   <File Name="reliabilityrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
   <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms244737.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
   <Name>Interface methods should be callable by child types</Name>
   <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
   <Resolution Name="Default">Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182153.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123">
   <Name>Override link demands should be identical to base</Name>
   <Description>If a virtual method has a LinkDemand, in many cases, so should any override of it, and if an override has a LinkDemand, so should the overridden virtual method. Because it is possible to call any of the overrides of a virtual method explicitly, they should all have the same LinkDemand status or, if not, should be reviewed. This also applies to LinkDemand security checks for methods that part of an interface implementation, because the caller might use an interface-typed reference to access the method.</Description>
   <Resolution Name="BaseOnly">Add the following security attribute to {0} in order to match a LinkDemand on base method {1}:  {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182305(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securitytransparencyrules.dll" Version="4.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401">
   <Name>P/Invokes should not be visible</Name>
   <Description>Interop layer should not be public. The DllImport attribute should not be applied to publicly accessible members (public or protected).</Description>
   <Resolution Name="Default">Change the accessibility of P/Invoke {0} so that it is no longer visible from outside its assembly.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182209.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalError</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101">
   <Name>Specify marshaling for P/Invoke string arguments</Name>
   <Description>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</Description>
   <Resolution Name="ParameterImplicitAnsi">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182319.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnNativeResourcesShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1049">
   <Name>Types that own native resources should be disposable</Name>
   <Description>Types that allocate unmanaged resources should implement IDisposable to allow callers to release those resources on demand. Failure to implement IDisposable can result in unmanaged resources being unavailable or underutilized.</Description>
   <Resolution Name="Default">Implement IDisposable on {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182173.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
